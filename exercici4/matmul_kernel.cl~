__private int pos (int* size, int* y, int* x){
	return *size * *y + *x;
}
// Matrix multiplication kernel
__kernel void MatMulKernel(
    __global float *A,
    __global float *B,
    __global float *C,
    __local float *blockA,
    __local float *blockB
    )
{
	int idXgroup = get_group_id(0);
	int idYgroup = get_group_id(1);
	int idX = get_global_id(0);
	int idY = get_global_id(1);
	int global_size = get_global_size(0);
	int local_size = get_local_size(0);

	/* Codi de multiplicacio de les matrius A * B.
	Cada Work Item s'encarrega del resultat d'un punt de la matriu C.*/
	
	int p = pos(&global_size,&idY,&idX);
	C[p] = 0;
	for (int step=0; step<global_size; ++step){
		C[p] += A[pos(&global_size,&idY,&step)] * B[pos(&global_size,&step,&idX)];
		
		
	}	
}

